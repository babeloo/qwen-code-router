name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  # Test job to ensure quality before release
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build project
        run: pnpm build

  # Parallel build jobs for each platform
  build-windows:
    needs: test
    runs-on: windows-latest
    continue-on-error: true  # Don't fail other platforms if this fails
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and package for Windows
        id: build
        shell: bash
        run: |
          # Set version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export VERSION="${{ github.event.inputs.version }}"
            export VERSION="${VERSION#v}"
          else
            export VERSION="${{ github.ref_name }}"
            export VERSION="${VERSION#v}"
          fi
          
          echo "Building for Windows with version: $VERSION"
          
          # Build project
          pnpm build
          
          # Ensure bin directory exists
          mkdir -p bin
          
          # Create Windows executable
          pnpm exec pkg dist/cli.js --targets node18-win-x64 --output bin/qcr-win32.exe
          
          # Create release package
          mkdir -p release-windows
          cp bin/qcr-win32.exe release-windows/qcr.exe
          cp -r dist release-windows/
          cp -r bin release-windows/
          cp package.json release-windows/
          cp README.md release-windows/ || echo "README.md not found"
          cp README.zh-CN.md release-windows/ || echo "README.zh-CN.md not found"
          cp LICENSE release-windows/ || echo "LICENSE not found"
          cp config.example.yaml release-windows/
          cp config.example.json release-windows/
          cp INSTALL.md release-windows/ || echo "INSTALL.md not found"
          cp INSTALL.zh-CN.md release-windows/ || echo "INSTALL.zh-CN.md not found"
          cp CROSS_PLATFORM_SUMMARY.md release-windows/ || echo "CROSS_PLATFORM_SUMMARY.md not found"
          cp CROSS_PLATFORM_SUMMARY.zh-CN.md release-windows/ || echo "CROSS_PLATFORM_SUMMARY.zh-CN.md not found"
          cp RELEASE_NOTES.md release-windows/ || echo "RELEASE_NOTES.md not found"
          cp RELEASE_NOTES.zh-CN.md release-windows/ || echo "RELEASE_NOTES.zh-CN.md not found"
          cp scripts/install.bat release-windows/ || echo "scripts/install.bat not found"
          
          # Update package.json for platform
          cd release-windows
          node -e "
            const pkg = require('./package.json');
            pkg.name = 'qwen-code-router-win32-x64';
            pkg.version = '$VERSION';
            pkg.os = ['win32'];
            pkg.cpu = ['x64'];
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          cd ..
          
          # Create archives
          powershell -Command "Compress-Archive -Path 'release-windows\*' -DestinationPath 'qwen-code-router-$VERSION-win32-x64.zip' -Force"
          
          # Create executable-only archive
          powershell -Command "Compress-Archive -Path 'release-windows\qcr.exe' -DestinationPath 'qwen-code-router-$VERSION-win32-x64-executable.zip' -Force"
          powershell -Command "Compress-Archive -Path 'release-windows\qcr.exe' -DestinationPath 'qwen-code-router-$VERSION-win32-x64-executable.zip' -Force"
          
          echo "Windows build completed successfully"

      - name: Upload Windows artifacts
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: |
            *.zip
          retention-days: 30

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail other platforms if this fails
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and package for Linux
        id: build
        run: |
          # Set version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export VERSION="${{ github.event.inputs.version }}"
            export VERSION="${VERSION#v}"
          else
            export VERSION="${{ github.ref_name }}"
            export VERSION="${VERSION#v}"
          fi
          
          echo "Building for Linux with version: $VERSION"
          
          # Build project
          pnpm build
          
          # Ensure bin directory exists
          mkdir -p bin
          
          # Create Linux executable
          pnpm exec pkg dist/cli.js --targets node18-linux-x64 --output bin/qcr-linux
          
          # Create release package
          mkdir -p release-linux
          cp bin/qcr-linux release-linux/qcr
          chmod +x release-linux/qcr
          cp -r dist release-linux/
          cp -r bin release-linux/
          cp package.json release-linux/
          cp README.md release-linux/ || echo "README.md not found"
          cp README.zh-CN.md release-linux/ || echo "README.zh-CN.md not found"
          cp LICENSE release-linux/ || echo "LICENSE not found"
          cp config.example.yaml release-linux/
          cp config.example.json release-linux/
          cp INSTALL.md release-linux/ || echo "INSTALL.md not found"
          cp INSTALL.zh-CN.md release-linux/ || echo "INSTALL.zh-CN.md not found"
          cp CROSS_PLATFORM_SUMMARY.md release-linux/ || echo "CROSS_PLATFORM_SUMMARY.md not found"
          cp CROSS_PLATFORM_SUMMARY.zh-CN.md release-linux/ || echo "CROSS_PLATFORM_SUMMARY.zh-CN.md not found"
          cp RELEASE_NOTES.md release-linux/ || echo "RELEASE_NOTES.md not found"
          cp RELEASE_NOTES.zh-CN.md release-linux/ || echo "RELEASE_NOTES.zh-CN.md not found"
          cp scripts/install.sh release-linux/ || echo "scripts/install.sh not found"
          chmod +x release-linux/install.sh || echo "scripts/install.sh not found"
          chmod +x release-linux/bin/qcr || echo "bin/qcr not found"
          
          # Update package.json for platform
          cd release-linux
          node -e "
            const pkg = require('./package.json');
            pkg.name = 'qwen-code-router-linux-x64';
            pkg.version = '$VERSION';
            pkg.os = ['linux'];
            pkg.cpu = ['x64'];
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          cd ..
          
          # Create archives
          tar -czf "qwen-code-router-$VERSION-linux-x64.tar.gz" -C release-linux .
          tar -czf "qwen-code-router-$VERSION-linux-x64-executable.tar.gz" -C release-linux qcr
          
          echo "Linux build completed successfully"

      - name: Upload Linux artifacts
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: |
            *.tar.gz
          retention-days: 30

  build-macos:
    needs: test
    runs-on: macos-latest
    continue-on-error: true  # Don't fail other platforms if this fails
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and package for macOS
        id: build
        run: |
          # Set version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export VERSION="${{ github.event.inputs.version }}"
            export VERSION="${VERSION#v}"
          else
            export VERSION="${{ github.ref_name }}"
            export VERSION="${VERSION#v}"
          fi
          
          echo "Building for macOS with version: $VERSION"
          
          # Build project
          pnpm build
          
          # Ensure bin directory exists
          mkdir -p bin
          
          # Create macOS executable
          pnpm exec pkg dist/cli.js --targets node18-macos-x64 --output bin/qcr-darwin
          
          # Create release package
          mkdir -p release-macos
          cp bin/qcr-darwin release-macos/qcr
          chmod +x release-macos/qcr
          cp -r dist release-macos/
          cp -r bin release-macos/
          cp package.json release-macos/
          cp README.md release-macos/ || echo "README.md not found"
          cp README.zh-CN.md release-macos/ || echo "README.zh-CN.md not found"
          cp LICENSE release-macos/ || echo "LICENSE not found"
          cp config.example.yaml release-macos/
          cp config.example.json release-macos/
          cp INSTALL.md release-macos/ || echo "INSTALL.md not found"
          cp INSTALL.zh-CN.md release-macos/ || echo "INSTALL.zh-CN.md not found"
          cp CROSS_PLATFORM_SUMMARY.md release-macos/ || echo "CROSS_PLATFORM_SUMMARY.md not found"
          cp CROSS_PLATFORM_SUMMARY.zh-CN.md release-macos/ || echo "CROSS_PLATFORM_SUMMARY.zh-CN.md not found"
          cp RELEASE_NOTES.md release-macos/ || echo "RELEASE_NOTES.md not found"
          cp RELEASE_NOTES.zh-CN.md release-macos/ || echo "RELEASE_NOTES.zh-CN.md not found"
          cp scripts/install.sh release-macos/ || echo "scripts/install.sh not found"
          chmod +x release-macos/install.sh || echo "scripts/install.sh not found"
          chmod +x release-macos/bin/qcr || echo "bin/qcr not found"
          
          # Update package.json for platform
          cd release-macos
          node -e "
            const pkg = require('./package.json');
            pkg.name = 'qwen-code-router-darwin-x64';
            pkg.version = '$VERSION';
            pkg.os = ['darwin'];
            pkg.cpu = ['x64'];
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          cd ..
          
          # Create archives
          tar -czf "qwen-code-router-$VERSION-darwin-x64.tar.gz" -C release-macos .
          tar -czf "qwen-code-router-$VERSION-darwin-x64-executable.tar.gz" -C release-macos qcr
          
          echo "macOS build completed successfully"

      - name: Upload macOS artifacts
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: |
            *.tar.gz
          retention-days: 30

  # Create GitHub release with all successful builds
  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            ref="${{ github.ref }}"
            version="${ref#refs/tags/}"
            echo "version=$version" >> $GITHUB_OUTPUT
          fi

      - name: Check build results
        id: check_builds
        run: |
          echo "Windows build success: ${{ needs.build-windows.outputs.success }}"
          echo "Linux build success: ${{ needs.build-linux.outputs.success }}"
          echo "macOS build success: ${{ needs.build-macos.outputs.success }}"
          
          # Count successful builds
          success_count=0
          if [ "${{ needs.build-windows.outputs.success }}" = "true" ]; then
            success_count=$((success_count + 1))
          fi
          if [ "${{ needs.build-linux.outputs.success }}" = "true" ]; then
            success_count=$((success_count + 1))
          fi
          if [ "${{ needs.build-macos.outputs.success }}" = "true" ]; then
            success_count=$((success_count + 1))
          fi
          
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          
          # Create build status summary
          if [ "$success_count" -eq 3 ]; then
            echo "build_status=All platforms built successfully ✅" >> $GITHUB_OUTPUT
          elif [ "$success_count" -gt 0 ]; then
            echo "build_status=Partial success: $success_count/3 platforms built ⚠️" >> $GITHUB_OUTPUT
          else
            echo "build_status=All builds failed ❌" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy all archives from artifacts
          find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
            cp "$file" release-assets/
            echo "Copied: $(basename "$file")"
          done
          
          # List all release assets
          echo "Release assets:"
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## Qwen Code Router ${{ steps.get_version.outputs.version }}
          
          A command-line tool to manage and switch API configurations for different large model service providers when using Qwen Code.
          
          ### Build Status
          ${{ steps.check_builds.outputs.build_status }}
          
          ### Features
          - ✅ Cross-platform support (Windows, Linux, macOS)
          - ✅ Multiple provider support (OpenAI, Azure, Anthropic, Google)
          - ✅ Easy configuration management
          - ✅ Quick provider/model switching
          - ✅ Configuration validation
          - ✅ Standalone executables (no Node.js required)
          
          ### Downloads
          Choose the appropriate package for your platform:
          
          **Full Packages (includes documentation and examples):**
          - **Windows**: `qwen-code-router-*-win32-x64.zip`
          - **Linux**: `qwen-code-router-*-linux-x64.tar.gz`
          - **macOS**: `qwen-code-router-*-darwin-x64.tar.gz`
          
          **Executable Only (minimal download):**
          - **Windows**: `qwen-code-router-*-win32-x64-executable.zip`
          - **Linux**: `qwen-code-router-*-linux-x64-executable.tar.gz`
          - **macOS**: `qwen-code-router-*-darwin-x64-executable.tar.gz`
          
          ### Installation
          
          #### Full Package Installation
          1. Download the appropriate full package for your platform
          2. Extract the archive
          3. Run the installation script:
             - Windows: Run `install.bat` as Administrator
             - Unix/Linux/macOS: Run `./install.sh`
          4. Or follow the manual installation instructions in `INSTALL.md`
          
          #### Executable Only Installation
          1. Download the executable-only package for your platform
          2. Extract the executable
          3. Place it in a directory in your PATH
          4. Create a configuration file (see examples in full package)
          
          ### Quick Start
          ```bash
          # Copy example configuration (full package only)
          cp config.example.yaml config.yaml
          
          # Edit configuration with your API keys
          # Then use the tool
          qcr list config
          qcr use openai-gpt4
          qcr run
          
          # Or use quick setup
          /router openai gpt-4
          qcr run
          ```
          
          ### Configuration Example
          ```yaml
          default_config:
            - name: openai-gpt4
          
          configs:
            - config:
                - name: openai-gpt4
                  provider: openai
                  model: gpt-4
          
          providers:
            - provider: openai
              env:
                api_key: YOUR_OPENAI_API_KEY
                base_url: https://api.openai.com/v1
                models:
                  - model: gpt-4
                  - model: gpt-3.5-turbo
          ```
          
          ### System Requirements
          - No Node.js installation required (executables are self-contained)
          - Windows 10+ / Linux (glibc 2.17+) / macOS 10.14+
          - Qwen Code installed and accessible via `qwen` command
          
          ### Documentation
          For detailed installation and usage instructions, see the included documentation:
          - `INSTALL.md` - Installation guide
          - `README.md` - General documentation
          - `CROSS_PLATFORM_SUMMARY.md` - Cross-platform compatibility notes
          
          ### Support
          For issues and questions, please visit the project repository.
          EOF

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Qwen Code Router ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            release-assets/*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "🎉 Release ${{ steps.get_version.outputs.version }} created successfully!"
          echo "📊 Build Status: ${{ steps.check_builds.outputs.build_status }}"
          echo "📦 Assets uploaded: $(ls -1 release-assets/ | wc -l)"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.url }}"
